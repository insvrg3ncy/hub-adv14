#!/usr/bin/env python3
"""
–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–µ–π–∫–æ–≤—ã–π SS14 —Å–µ—Ä–≤–µ—Ä
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É –Ω–∏–º–∏
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ SS14 —Å–µ—Ä–≤–µ—Ä–∞
"""

import http.server
import socketserver
import json
import os
import time
import urllib.parse
import threading
import random
import signal
import sys
from typing import Dict, List, Optional
from socks5_advertiser import Socks5Advertiser
from proxy_manager import init_proxy_manager, get_proxy_manager

class ServerInstance:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    def __init__(self, name: str, port: int, status_file: str = None, info_file: str = None):
        self.name = name
        self.port = port
        self.status_file = status_file
        self.info_file = info_file
        self.is_active = True
        self.last_accessed = time.time()
        self.access_count = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
servers = {}
current_server = None
server_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
advertiser = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
    global advertiser
    if advertiser:
        advertiser.stop()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    proxy_manager = get_proxy_manager()
    if proxy_manager:
        proxy_manager.disable_global_proxy()
    
    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    sys.exit(0)

def init_proxy_from_config():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        with open('advertiser_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        proxy_list = config.get('socks5_proxy_list', [])
        proxy_file = config.get('socks5_proxy_list_file')
        username = config.get('proxy_username', '')
        password = config.get('proxy_password', '')
        
        if proxy_list or proxy_file:
            print(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏...")
            proxy_manager = init_proxy_manager(proxy_list, proxy_file, username, password)
            
            if proxy_manager.start_with_proxy():
                print("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
                return False
        else:
            print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False

class MultiSS14Handler(http.server.BaseHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ö–∞–±–∞)"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        print(f"[{time.strftime('%H:%M:%S')}] POST {self.client_address[0]} -> {self.path}")
        
        # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å—ã —Ç–∞–∫ –∂–µ, –∫–∞–∫ GET
        if path == '/status':
            self.handle_status()
        elif path == '/info':
            self.handle_info()
        else:
            self.send_error(404, "Not Found")

    def do_GET(self):
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        print(f"[{time.strftime('%H:%M:%S')}] GET {self.client_address[0]} -> {self.path}")
        
        # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å –∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path
        query = parsed_path.query
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        if path == '/servers':
            self.handle_servers_list()
        elif path == '/switch':
            self.handle_server_switch(query)
        elif path == '/add':
            self.handle_add_server(query)
        elif path == '/remove':
            self.handle_remove_server(query)
        elif path == '/status':
            self.handle_status()
        elif path == '/info':
            self.handle_info()
        elif path == '/advertiser/start':
            self.handle_advertiser_start()
        elif path == '/advertiser/stop':
            self.handle_advertiser_stop()
        elif path == '/advertiser/status':
            self.handle_advertiser_status()
        elif path == '/proxy/status':
            self.handle_proxy_status()
        elif path == '/proxy/switch':
            self.handle_proxy_switch()
        else:
            self.send_response(404)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Not Found')

    def handle_servers_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Connection', 'close')
        self.send_header('Server', 'SS14-MultiServer/1.0')
        self.send_header('Cache-Control', 'no-cache')
        self.end_headers()
        
        with server_lock:
            servers_info = []
            for server_id, server in servers.items():
                servers_info.append({
                    'id': server_id,
                    'name': server.name,
                    'port': server.port,
                    'is_active': server.is_active,
                    'is_current': server_id == current_server,
                    'last_accessed': server.last_accessed,
                    'access_count': server.access_count
                })
        
        response = {
            'current_server': current_server,
            'total_servers': len(servers),
            'servers': servers_info
        }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False, indent=2).encode('utf-8'))

    def handle_server_switch(self, query):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä"""
        global current_server
        params = urllib.parse.parse_qs(query)
        server_id = params.get('id', [None])[0]
        
        if not server_id:
            self.send_response(400)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Server ID required'}).encode('utf-8'))
            return
        
        with server_lock:
            if server_id not in servers:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': 'Server not found'}).encode('utf-8'))
                return
            
            if not servers[server_id].is_active:
                self.send_response(400)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': 'Server is inactive'}).encode('utf-8'))
                return
            
            current_server = server_id
            servers[server_id].last_accessed = time.time()
            servers[server_id].access_count += 1
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({
            'success': True,
            'current_server': current_server,
            'server_name': servers[server_id].name
        }).encode('utf-8'))

    def handle_add_server(self, query):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"""
        global current_server
        params = urllib.parse.parse_qs(query)
        name = params.get('name', [None])[0]
        port = params.get('port', [None])[0]
        
        if not name or not port:
            self.send_response(400)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Name and port required'}).encode('utf-8'))
            return
        
        try:
            port = int(port)
        except ValueError:
            self.send_response(400)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Invalid port number'}).encode('utf-8'))
            return
        
        server_id = f"server_{len(servers) + 1}"
        
        with server_lock:
            servers[server_id] = ServerInstance(name, port)
            if not current_server:
                current_server = server_id
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({
            'success': True,
            'server_id': server_id,
            'name': name,
            'port': port
        }).encode('utf-8'))

    def handle_remove_server(self, query):
        """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        global current_server
        params = urllib.parse.parse_qs(query)
        server_id = params.get('id', [None])[0]
        
        if not server_id:
            self.send_response(400)
            self.send_header('Content-Type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'error': 'Server ID required'}).encode('utf-8'))
            return
        
        with server_lock:
            if server_id not in servers:
                self.send_response(404)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'error': 'Server not found'}).encode('utf-8'))
                return
            
            del servers[server_id]
            
            # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if current_server == server_id:
                if servers:
                    current_server = next(iter(servers.keys()))
                else:
                    current_server = None
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({'success': True}).encode('utf-8'))

    def handle_advertiser_start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"""
        global advertiser
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        try:
            if advertiser is None:
                advertiser = Socks5Advertiser()
            
            if not advertiser.is_running:
                advertiser.start()
                response = {'success': True, 'message': '–†–µ–∫–ª–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞'}
            else:
                response = {'success': False, 'message': '–†–µ–∫–ª–∞–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞'}
        except Exception as e:
            response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∫–ª–∞–º—ã: {e}'}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def handle_advertiser_stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"""
        global advertiser
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        try:
            if advertiser and advertiser.is_running:
                advertiser.stop()
                response = {'success': True, 'message': '–†–µ–∫–ª–∞–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
            else:
                response = {'success': False, 'message': '–†–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞'}
        except Exception as e:
            response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}'}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def handle_advertiser_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–ª–∞–º—ã"""
        global advertiser
        
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        try:
            if advertiser:
                status = advertiser.get_status()
                response = {'success': True, 'status': status}
            else:
                response = {'success': True, 'status': {'is_running': False, 'message': '–†–µ–∫–ª–∞–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}}
        except Exception as e:
            response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}'}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False, indent=2).encode('utf-8'))

    def handle_proxy_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        try:
            proxy_manager = get_proxy_manager()
            if proxy_manager:
                status = proxy_manager.get_status()
                response = {'success': True, 'status': status}
            else:
                response = {'success': True, 'status': {'is_enabled': False, 'message': '–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}}
        except Exception as e:
            response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏: {e}'}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False, indent=2).encode('utf-8'))

    def handle_proxy_switch(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.end_headers()
        
        try:
            proxy_manager = get_proxy_manager()
            if proxy_manager:
                if proxy_manager.switch_proxy():
                    response = {'success': True, 'message': '–ü—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω', 'current_proxy': proxy_manager.current_proxy}
                else:
                    response = {'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏'}
            else:
                response = {'success': False, 'message': '–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
        except Exception as e:
            response = {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}'}
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def handle_status(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Connection', 'close')
        self.send_header('Server', 'SS14-Server/1.0')
        self.send_header('Cache-Control', 'no-cache')
        self.end_headers()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ –ø–æ—Ä—Ç—É
        server_port = self.server.server_address[1]
        server_name = f"server_{server_port}"
        
        with server_lock:
            if server_name not in servers:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
                servers[server_name] = ServerInstance(
                    name=f"Server {server_port}",
                    port=server_port
                )
            
            server = servers[server_name]
            server.last_accessed = time.time()
            server.access_count += 1
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
            status = self.get_server_status_by_port(server_port)
        
        self.wfile.write(json.dumps(status, ensure_ascii=False).encode('utf-8'))

    def handle_info(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.send_response(200)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Connection', 'close')
        self.send_header('Server', 'SS14-Server/1.0')
        self.send_header('Cache-Control', 'no-cache')
        self.end_headers()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ –ø–æ—Ä—Ç—É
        server_port = self.server.server_address[1]
        server_name = f"server_{server_port}"
        
        with server_lock:
            if server_name not in servers:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
                servers[server_name] = ServerInstance(
                    name=f"Server {server_port}",
                    port=server_port
                )
            
            server = servers[server_name]
            server.last_accessed = time.time()
            server.access_count += 1
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
            info = self.get_server_info_by_port(server_port)
        
        self.wfile.write(json.dumps(info, ensure_ascii=False).encode('utf-8'))

    def load_server_status(self, server: ServerInstance) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback"""
        if server.status_file and os.path.exists(server.status_file):
            try:
                with open(server.status_file, 'r', encoding='utf-8') as f:
                    return json.loads(f.read().strip())
            except:
                pass
        
        # Fallback —Å –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–∞
        return {
            "name": server.name,
            "players": random.randint(50, 2000),
            "tags": [],
            "map": None,
            "round_id": random.randint(1, 100),
            "soft_max_players": 5000,
            "panic_bunker": False,
            "baby_jail": False,
            "run_level": 1,
            "preset": "–°–µ–∫—Ä–µ—Ç"
        }

    def load_server_info(self, server: ServerInstance) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback"""
        if server.info_file and os.path.exists(server.info_file):
            try:
                with open(server.info_file, 'r', encoding='utf-8') as f:
                    return json.loads(f.read().strip())
            except:
                pass
        
        # Fallback —Å –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–∞
        return {
            "connect_address": f"ss14://localhost:{server.port}/",
            "auth": {
                "mode": "Required",
                "public_key": "h9/LkNgIKvPihU7/DFM22F+uerH+VIVWyKPXaxZNICc="
            },
            "build": {
                "engine_version": "238.0.0",
                "fork_id": "syndicate-public",
                "version": "e301f52e655c57d6df4a0475e75eb4b24f64e0e4",
                "download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/file/SS14.Client.zip",
                "hash": "7670B58E1A0A39C33D5AB882194BB29D60951C3F88DB93EFB1E92F6648CCBDE2",
                "acz": False,
                "manifest_download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/download",
                "manifest_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/manifest",
                "manifest_hash": "9AF4E8A392C87A4BDB60CDA83A59AFCE4DEF439FF44E6094DF077295A6964C7E"
            },
            "desc": f"–°–µ—Ä–≤–µ—Ä {server.name} - –ì–æ–π–¥–∞!"
        }

    def get_server_status_by_port(self, port: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞"""
        # –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤
        server_names = [
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon", 
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
            "t.me/VT_SS14 | PJB, go smd, hub will cry soon",
        ]
        
        # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
        maps = ["BoxStation", "DeltaStation", "MetaStation", "PackedStation", "Saltern", "OasisStation", "KiloStation", "BirdshotStation"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Ä—Ç - 1212)
        server_index = port - 1212
        if server_index < 0 or server_index >= len(server_names):
            return self.get_fallback_status()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name = server_names[server_index]
        players = random.randint(180, 250)
        map_name = random.choice(maps)
        round_id = random.randint(1, 100)
        
        return {
            "name": name,
            "players": players,
            "tags": [],
            "map": map_name,
            "round_id": round_id,
            "soft_max_players": 350,
            "panic_bunker": False,
            "baby_jail": False,
            "run_level": 1,
            "preset": "Medium"
        }

    def get_server_info_by_port(self, port: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if port < 1212 or port > 1244:
            return self.get_fallback_info()
        
        return {
            "connect_address": f"ss14://194.102.104.184:{port}",
            "auth": {
                "mode": "Required",
                "public_key": "h9/LkNgIKvPihU7/DFM22F+uerH+VIVWyKPXaxZNICc="
            },
            "build": {
                "engine_version": "238.0.0",
                "fork_id": "syndicate-public",
                "version": "e301f52e655c57d6df4a0475e75eb4b24f64e0e4",
                "download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/file/SS14.Client.zip",
                "hash": "7670B58E1A0A39C33D5AB882194BB29D60951C3F88DB93EFB1E92F6648CCBDE2",
                "acz": False,
                "manifest_download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/download",
                "manifest_hash": "9AF4E8A392C87A4BDB60CDA83A59AFCE4DEF439FF44E6094DF077295A6964C7E"
            },
            "desc": f"""https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14   
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14""",
            "links": [
                {
                    "name": "Telegram",
                    "url": "https://t.me/VT_SS14"
                }
            ]
        }

    def get_fallback_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback —Å—Ç–∞—Ç—É—Å"""
        return {
            "name": "TeZt ZerVer (Fallback)",
            "players": 1723,
            "tags": [],
            "map": None,
            "round_id": 8,
            "soft_max_players": 5000,
            "panic_bunker": False,
            "baby_jail": False,
            "run_level": 1,
            "preset": "–°–µ–∫—Ä–µ—Ç"
        }

    def get_fallback_info(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        return {
            "connect_address": "",
            "auth": {
                "mode": "Required",
                "public_key": "h9/LkNgIKvPihU7/DFM22F+uerH+VIVWyKPXaxZNICc="
            },
            "build": {
                "engine_version": "238.0.0",
                "fork_id": "syndicate-public",
                "version": "e301f52e655c57d6df4a0475e75eb4b24f64e0e4",
                "download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/file/SS14.Client.zip",
                "hash": "7670B58E1A0A39C33D5AB882194BB29D60951C3F88DB93EFB1E92F6648CCBDE2",
                "acz": False,
                "manifest_download_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/download",
                "manifest_url": "https://cdn.station14.ru/fork/syndicate-public/version/e301f52e655c57d6df4a0475e75eb4b24f64e0e4/manifest",
                "manifest_hash": "9AF4E8A392C87A4BDB60CDA83A59AFCE4DEF439FF44E6094DF077295A6964C7E"
            },
            "desc": f"""https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14   
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14
                    https://t.me/VT_SS14""",
            "links": [
                {
                    "name": "Telegram",
                    "url": "https://t.me/VT_SS14"
                }
            ]
        }

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        pass

    def version_string(self):
        return 'SS14-MultiServer/1.0'

def load_config(config_file: str = 'multiservers.json') -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    default_config = {
        "servers": [
            {
                "id": "server_1",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1212,
                "status_file": "status.json",
                "info_file": "info.json"
            },
            {
                "id": "server_2", 
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1213,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_3",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon", 
                "port": 1214,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_4",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1215,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_5",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1216,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_6",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1217,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_7",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1218,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_8",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1219,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_9",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1220,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_10",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1221,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_11",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1222,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_12",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1223,
                "status_file": None,
                "info_file": None
            },
            {
                "id": "server_13",
                "name": "t.me/VT_SS14 | PJB go smd, hub will cry soon",
                "port": 1224,
                "status_file": None,
                "info_file": None
            }
        ],
        "default_server": "server_1",
        "port": 1212
    }
    
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    return default_config

def save_config(config: dict, config_file: str = 'multiservers.json'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def create_handler_class():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    return MultiSS14Handler

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º VULPS —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏...")
    proxy_initialized = init_proxy_from_config()
    
    if not proxy_initialized:
        print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    for server_config in config.get('servers', []):
        server = ServerInstance(
            name=server_config['name'],
            port=server_config['port'],
            status_file=server_config.get('status_file'),
            info_file=server_config.get('info_file')
        )
        servers[server_config['id']] = server
    
    current_server = config.get('default_server')
    if current_server not in servers:
        current_server = next(iter(servers.keys())) if servers else None
    
    # –ü–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    server_ports = list(range(1212, 1225))  # 1212-1224 (13 –ø–æ—Ä—Ç–æ–≤)
    
    print("=" * 70)
    print("üéÆ –ú–£–õ–¨–¢–ò–°–ï–†–í–ï–†–ù–´–ô –§–ï–ô–ö–û–í–´–ô SS14 –°–ï–†–í–ï–†")
    print("=" * 70)
    print(f"üìç –ü–æ—Ä—Ç—ã: {', '.join(map(str, server_ports))}")
    print(f"üåê –ê–¥—Ä–µ—Å–∞: {', '.join(f'http://0.0.0.0:{port}' for port in server_ports)}")
    print("üì° Endpoints:")
    print("   ‚Ä¢ /status, /info - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ SS14 —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
    print("   ‚Ä¢ /servers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("   ‚Ä¢ /switch?id=server_id - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("   ‚Ä¢ /add?name=Name&port=1234 - –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    print("   ‚Ä¢ /remove?id=server_id - —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    print("   ‚Ä¢ /advertiser/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ —Ö–∞–±–µ")
    print("   ‚Ä¢ /advertiser/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É")
    print("   ‚Ä¢ /advertiser/status - —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–ª–∞–º—ã")
    print("   ‚Ä¢ /proxy/status - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏")
    print("   ‚Ä¢ /proxy/switch - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
    print(f"üîÑ –¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä: {current_server}")
    print(f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}")
    print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    for server_id, server in servers.items():
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if server.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        current = " ‚Üê –¢–ï–ö–£–©–ò–ô" if server_id == current_server else ""
        print(f"   {server_id}: {server.name} (–ø–æ—Ä—Ç {server.port}) {status}{current}")
    
    print()
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã...")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    HandlerClass = create_handler_class()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞
    httpd_servers = []
    threads = []
    
    try:
        for port in server_ports:
            try:
                httpd = socketserver.TCPServer(("0.0.0.0", port), HandlerClass)
                httpd_servers.append(httpd)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def run_server(server):
                    try:
                        server.serve_forever()
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {server.server_address[1]}: {e}")
                
                thread = threading.Thread(target=run_server, args=(httpd,))
                thread.daemon = True
                thread.start()
                threads.append(thread)
                
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                
            except OSError as e:
                if e.errno == 98:  # Address already in use
                    print(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞ {port}: {e}")
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞ {port}: {e}")
        
        if not httpd_servers:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            exit(1)
        
        print(f"üéâ –ó–∞–ø—É—â–µ–Ω–æ {len(httpd_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
            
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã...")
        for httpd in httpd_servers:
            try:
                httpd.shutdown()
            except:
                pass
        print("‚úÖ –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        save_config(config)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
