#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ngrok —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import json
import time
import subprocess
import requests
import threading
import os
import signal
import sys
import socks
import socket
from typing import List, Dict, Optional

class NgrokManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ngrok —Ç—É–Ω–Ω–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, proxy_host: str, proxy_port: int):
        self.proxy_host = proxy_host
        self.proxy_port = proxy_port
        self.tunnels = {}
        self.ngrok_process = None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏
        proxy_url = f"socks5://{proxy_host}:{proxy_port}"
        os.environ['HTTP_PROXY'] = proxy_url
        os.environ['HTTPS_PROXY'] = proxy_url
        os.environ['ALL_PROXY'] = proxy_url
        
        print(f"üåê –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏: {proxy_host}:{proxy_port}")
    
    def start_ngrok(self, port: int) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ngrok
            old_http_proxy = os.environ.get('HTTP_PROXY')
            old_https_proxy = os.environ.get('HTTPS_PROXY')
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è ngrok
            if 'HTTP_PROXY' in os.environ:
                del os.environ['HTTP_PROXY']
            if 'HTTPS_PROXY' in os.environ:
                del os.environ['HTTPS_PROXY']
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –ë–ï–ó –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ–Ω–µ
                cmd = ['ngrok', 'tcp', str(port), '--log=stdout']
                self.ngrok_process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                    text=True
                )
                
                # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                time.sleep(8)
                
                # –ü–æ–ª—É—á–∞–µ–º URL —Ç—É–Ω–Ω–µ–ª—è
                tunnel_url = self.get_tunnel_url(port)
                if tunnel_url:
                    self.tunnels[port] = tunnel_url
                    print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ—Ä—Ç–∞ {port}: {tunnel_url}")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ—Ä—Ç–∞ {port}")
                    return False
                    
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if old_http_proxy:
                    os.environ['HTTP_PROXY'] = old_http_proxy
                if old_https_proxy:
                    os.environ['HTTPS_PROXY'] = old_https_proxy
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
            return False
    
    def get_tunnel_url(self, port: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç URL —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"""
        try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
            old_http_proxy = os.environ.get('HTTP_PROXY')
            old_https_proxy = os.environ.get('HTTPS_PROXY')
            old_all_proxy = os.environ.get('ALL_PROXY')
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è localhost
            if 'HTTP_PROXY' in os.environ:
                del os.environ['HTTP_PROXY']
            if 'HTTPS_PROXY' in os.environ:
                del os.environ['HTTPS_PROXY']
            if 'ALL_PROXY' in os.environ:
                del os.environ['ALL_PROXY']
            
            try:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É–Ω–Ω–µ–ª—è—Ö
                response = requests.get('http://localhost:4040/api/tunnels', timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    for tunnel in data.get('tunnels', []):
                        if tunnel.get('config', {}).get('addr') == f'localhost:{port}':
                            public_url = tunnel.get('public_url', '')
                            if public_url:
                                # –£–±–∏—Ä–∞–µ–º tcp:// –ø—Ä–µ—Ñ–∏–∫—Å
                                if public_url.startswith('tcp://'):
                                    public_url = public_url[6:]
                                return public_url
                return None
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if old_http_proxy:
                    os.environ['HTTP_PROXY'] = old_http_proxy
                if old_https_proxy:
                    os.environ['HTTPS_PROXY'] = old_https_proxy
                if old_all_proxy:
                    os.environ['ALL_PROXY'] = old_all_proxy
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è –ø–æ—Ä—Ç–∞ {port}: {e}")
            return None
    
    def stop_ngrok(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ngrok"""
        if self.ngrok_process:
            self.ngrok_process.terminate()
            self.ngrok_process.wait()
            self.ngrok_process = None
            print("üõë ngrok –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def update_config(self, config_file: str = 'advertiser_config.json'):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å URL'–∞–º–∏ —Ç—É–Ω–Ω–µ–ª–µ–π"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            print(f"üîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å {len(self.tunnels)} —Ç—É–Ω–Ω–µ–ª—è–º–∏...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
            for i, server in enumerate(config.get('servers', [])):
                port = 1212 + i
                if port in self.tunnels:
                    tunnel_url = self.tunnels[port]
                    # –£–±–∏—Ä–∞–µ–º tcp:// –µ—Å–ª–∏ –µ—Å—Ç—å
                    if tunnel_url.startswith('tcp://'):
                        tunnel_url = tunnel_url[6:]
                    
                    server['address'] = f"ss14://{tunnel_url}"
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {i+1}: {server['address']}")
                else:
                    # –ï—Å–ª–∏ —Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
                    server['address'] = f"ss14://localhost:{port}"
                    print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {i+1} –æ—Å—Ç–∞–ª—Å—è localhost:{port} (—Ç—É–Ω–Ω–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω)")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def create_tunnels_for_ports(self, ports: List[int]) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ ngrok API"""
        success_count = 0
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º ngrok daemon
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ngrok daemon...")
        if not self._start_ngrok_daemon():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok daemon")
            return False
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ daemon
        time.sleep(5)
        
        # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ API
        for port in ports:
            print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ—Ä—Ç–∞ {port}...")
            if self._create_tunnel_via_api(port):
                success_count += 1
                print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ—Ä—Ç–∞ {port}")
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—É–Ω–Ω–µ–ª—è–º–∏
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –ø–æ—Ä—Ç–∞ {port}")
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {success_count}/{len(ports)} —Ç—É–Ω–Ω–µ–ª–µ–π")
        return success_count > 0
    
    def _start_ngrok_daemon(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok daemon"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è ngrok
            old_http_proxy = os.environ.pop('HTTP_PROXY', None)
            old_https_proxy = os.environ.pop('HTTPS_PROXY', None)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok daemon
                cmd = ['ngrok', 'start', '--none', '--log=stdout']
                self.ngrok_process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                    text=True
                )
                print("üöÄ ngrok daemon –∑–∞–ø—É—â–µ–Ω")
                return True
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if old_http_proxy:
                    os.environ['HTTP_PROXY'] = old_http_proxy
                if old_https_proxy:
                    os.environ['HTTPS_PROXY'] = old_https_proxy
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok daemon: {e}")
            return False
    
    def _create_tunnel_via_api(self, port: int) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å —á–µ—Ä–µ–∑ ngrok API"""
        try:
            import requests
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
            old_http_proxy = os.environ.get('HTTP_PROXY')
            old_https_proxy = os.environ.get('HTTPS_PROXY')
            old_all_proxy = os.environ.get('ALL_PROXY')
            
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è localhost
            if 'HTTP_PROXY' in os.environ:
                del os.environ['HTTP_PROXY']
            if 'HTTPS_PROXY' in os.environ:
                del os.environ['HTTPS_PROXY']
            if 'ALL_PROXY' in os.environ:
                del os.environ['ALL_PROXY']
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è localhost
                session = requests.Session()
                
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è
                tunnel_data = {
                    "name": f"tcp-{port}",
                    "proto": "tcp",
                    "addr": str(port)
                }
                
                # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
                response = session.post(
                    "http://localhost:4040/api/tunnels",
                    json=tunnel_data,
                    timeout=10
                )
                
                if response.status_code == 201:
                    tunnel_info = response.json()
                    public_url = tunnel_info.get('public_url', '')
                    if public_url:
                        # –£–±–∏—Ä–∞–µ–º tcp:// –ø—Ä–µ—Ñ–∏–∫—Å
                        if public_url.startswith('tcp://'):
                            public_url = public_url[6:]
                        self.tunnels[port] = public_url
                        return True
                
                return False
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                if old_http_proxy:
                    os.environ['HTTP_PROXY'] = old_http_proxy
                if old_https_proxy:
                    os.environ['HTTPS_PROXY'] = old_https_proxy
                if old_all_proxy:
                    os.environ['ALL_PROXY'] = old_all_proxy
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è —á–µ—Ä–µ–∑ API: {e}")
            return False

def load_proxy_from_file(proxy_file: str = 'socks5_proxy_list.txt') -> Optional[tuple]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(proxy_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                parts = line.split(':')
                if len(parts) == 2:
                    return parts[0], int(parts[1])
        
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ ngrok –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
    proxy = load_proxy_from_file()
    if not proxy:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞")
        return
    
    proxy_host, proxy_port = proxy
    print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy_host}:{proxy_port}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    ngrok_manager = NgrokManager(proxy_host, proxy_port)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        ngrok_manager.stop_ngrok()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ä—Ç–æ–≤
        ports = [1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224]
        if ngrok_manager.create_tunnels_for_ports(ports):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            ngrok_manager.update_config()
            
            print("‚úÖ –¢—É–Ω–Ω–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print("üéÆ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å VULPS —Å–µ—Ä–≤–µ—Ä")
            print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º
            while True:
                time.sleep(1)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª–∏")
    
    except KeyboardInterrupt:
        pass
    finally:
        ngrok_manager.stop_ngrok()

if __name__ == "__main__":
    main()
