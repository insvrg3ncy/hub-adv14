#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ–≥–æ Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ SOCKS5 –ø—Ä–æ–∫—Å–∏
"""

import os
import socket
import socks
import requests
import urllib3
from typing import Optional, List
import random
import time

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, proxy_list: List[str] = None, proxy_file: str = None, username: str = "", password: str = ""):
        self.proxy_list = proxy_list or []
        self.proxy_file = proxy_file
        self.username = username
        self.password = password
        self.current_proxy = None
        self.original_socket = None
        self.is_proxy_enabled = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if proxy_file and not proxy_list:
            self.load_proxies_from_file()
        
        # User-Agent —Å–ø–∏—Å–æ–∫
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0"
        ]
    
    def load_proxies_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.proxy_file:
            return
        
        try:
            with open(self.proxy_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            self.proxy_list = []
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    self.proxy_list.append(line)
            
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxy_list)} –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ {self.proxy_file}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ {self.proxy_file}: {e}")
            self.proxy_list = []
    
    def test_proxy(self, proxy_url: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"""
        try:
            parts = proxy_url.split(':')
            if len(parts) != 2:
                return False
            
            proxy_host = parts[0]
            proxy_port = int(parts[1])
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–æ–∫–µ—Ç —Å –ø—Ä–æ–∫—Å–∏
            test_socket = socks.socksocket()
            test_socket.set_proxy(socks.SOCKS5, proxy_host, proxy_port, 
                                username=self.username if self.username else None,
                                password=self.password if self.password else None)
            test_socket.settimeout(10)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–∞–±—É SS14
            test_socket.connect(('hub.spacestation14.com', 443))
            test_socket.close()
            
            print(f"‚úì –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_url}")
            return True
            
        except Exception as e:
            print(f"‚úó –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_url} - {e}")
            return False
    
    def find_working_proxy(self) -> Optional[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏"""
        print("üîç –ò—â–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏...")
        
        for proxy in self.proxy_list:
            if self.test_proxy(proxy):
                return proxy
        
        print("‚ùå –†–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    def enable_global_proxy(self, proxy_url: str) -> bool:
        """–í–∫–ª—é—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            parts = proxy_url.split(':')
            if len(parts) != 2:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_url}")
            
            proxy_host = parts[0]
            proxy_port = int(parts[1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ–∫–µ—Ç
            self.original_socket = socket.socket
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            socks.set_default_proxy(socks.SOCKS5, proxy_host, proxy_port,
                                  username=self.username if self.username else None,
                                  password=self.password if self.password else None)
            socket.socket = socks.socksocket
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è requests
            os.environ['HTTP_PROXY'] = f'socks5://{proxy_host}:{proxy_port}'
            os.environ['HTTPS_PROXY'] = f'socks5://{proxy_host}:{proxy_port}'
            
            if self.username and self.password:
                os.environ['HTTP_PROXY'] = f'socks5://{self.username}:{self.password}@{proxy_host}:{proxy_port}'
                os.environ['HTTPS_PROXY'] = f'socks5://{self.username}:{self.password}@{proxy_host}:{proxy_port}'
            
            self.current_proxy = proxy_url
            self.is_proxy_enabled = True
            
            print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω: {proxy_url}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    def disable_global_proxy(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
        if self.is_proxy_enabled and self.original_socket:
            socket.socket = self.original_socket
            self.original_socket = None
        
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if 'HTTP_PROXY' in os.environ:
            del os.environ['HTTP_PROXY']
        if 'HTTPS_PROXY' in os.environ:
            del os.environ['HTTPS_PROXY']
        
        self.current_proxy = None
        self.is_proxy_enabled = False
        print("üîÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def switch_proxy(self) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–∫—Å–∏"""
        if not self.proxy_list:
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
        current_index = 0
        if self.current_proxy and self.current_proxy in self.proxy_list:
            current_index = self.proxy_list.index(self.current_proxy)
        
        # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ –∫—Ä—É–≥—É
        for i in range(len(self.proxy_list)):
            next_index = (current_index + i + 1) % len(self.proxy_list)
            next_proxy = self.proxy_list[next_index]
            
            if self.test_proxy(next_proxy):
                self.disable_global_proxy()
                return self.enable_global_proxy(next_proxy)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        return False
    
    def create_proxied_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–µ—Ç requests.Session —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏"""
        session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
        if self.current_proxy:
            parts = self.current_proxy.split(':')
            proxy_host = parts[0]
            proxy_port = int(parts[1])
            
            proxy_url = f'socks5://{proxy_host}:{proxy_port}'
            if self.username and self.password:
                proxy_url = f'socks5://{self.username}:{self.password}@{proxy_host}:{proxy_port}'
            
            session.proxies = {
                'http': proxy_url,
                'https': proxy_url
            }
        
        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        session.headers.update({
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site'
        })
        
        return session
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        try:
            session = self.create_proxied_session()
            response = session.get('https://hub.spacestation14.com/api/servers/', 
                                 timeout=10, verify=False)
            session.close()
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"""
        return {
            'is_enabled': self.is_proxy_enabled,
            'current_proxy': self.current_proxy,
            'total_proxies': len(self.proxy_list),
            'connection_works': self.test_connection() if self.is_proxy_enabled else False
        }
    
    def start_with_proxy(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—á–µ–≥–æ"""
        working_proxy = self.find_working_proxy()
        if working_proxy:
            return self.enable_global_proxy(working_proxy)
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
proxy_manager = None

def init_proxy_manager(proxy_list: List[str] = None, proxy_file: str = None, username: str = "", password: str = ""):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏"""
    global proxy_manager
    proxy_manager = ProxyManager(proxy_list, proxy_file, username, password)
    return proxy_manager

def get_proxy_manager() -> Optional[ProxyManager]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏"""
    return proxy_manager
