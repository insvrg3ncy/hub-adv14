#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ö–∞–±–µ SS14 —á–µ—Ä–µ–∑ SOCKS5 –ø—Ä–æ–∫—Å–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å VULPS –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP
"""

import json
import time
import random
import threading
import requests
import socks
import socket
from typing import List, Dict, Optional
from datetime import datetime
import urllib3
from urllib3.exceptions import InsecureRequestWarning
from proxy_manager import get_proxy_manager

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(InsecureRequestWarning)

class Socks5Advertiser:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ SOCKS5 –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self, config_file: str = 'advertiser_config.json'):
        self.config = self.load_config(config_file)
        self.working_proxies = []
        self.current_proxy_index = 0
        self.proxy_error_count = {}
        self.advertisement_timer = None
        self.is_running = False
        self.lock = threading.Lock()
        
        # User-Agent —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0"
        ]
        
        print(f"üéØ Socks5Advertiser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üì° –•–∞–±: {self.config['hub_url']}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∫–ª–∞–º—ã: {self.config['advertisement_interval_minutes']} –º–∏–Ω")
        print(f"üîó –°–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã: {len(self.config['servers'])}")
        print(f"üåê –ü—Ä–æ–∫—Å–∏ –≤ —Å–ø–∏—Å–∫–µ: {len(self.config['socks5_proxy_list'])}")
    
    def load_config(self, config_file: str) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self.get_default_config()
    
    def get_default_config(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "hub_url": "https://hub.spacestation14.com",
            "advertisement_interval_minutes": 2,
            "request_timeout_seconds": 30,
            "max_retries": 3,
            "retry_delay_ms": 3000,
            "auto_test_proxies": True,
            "proxy_test_timeout_seconds": 10,
            "socks5_proxy_list": [],
            "proxy_username": "",
            "proxy_password": "",
            "servers": []
        }
    
    def create_session_with_proxy(self, proxy_url: str = None) -> requests.Session:
        """–°–æ–∑–¥–∞–µ—Ç requests.Session —Å SOCKS5 –ø—Ä–æ–∫—Å–∏"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
        proxy_manager = get_proxy_manager()
        if proxy_manager:
            return proxy_manager.create_proxied_session()
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        session = requests.Session()
        
        if proxy_url:
            # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
            parts = proxy_url.split(':')
            if len(parts) != 2:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_url}")
            
            proxy_host = parts[0]
            proxy_port = int(parts[1])
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏
            session.proxies = {
                'http': f'socks5://{proxy_host}:{proxy_port}',
                'https': f'socks5://{proxy_host}:{proxy_port}'
            }
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.config.get('proxy_username') and self.config.get('proxy_password'):
                session.proxies = {
                    'http': f'socks5://{self.config["proxy_username"]}:{self.config["proxy_password"]}@{proxy_host}:{proxy_port}',
                    'https': f'socks5://{self.config["proxy_username"]}:{self.config["proxy_password"]}@{proxy_host}:{proxy_port}'
                }
        
        # –°–ª—É—á–∞–π–Ω—ã–π User-Agent
        session.headers.update({
            'User-Agent': random.choice(self.user_agents),
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'cross-site'
        })
        
        # –¢–∞–π–º–∞—É—Ç
        session.timeout = self.config['request_timeout_seconds']
        
        return session
    
    def test_proxy(self, proxy_url: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ö–∞–±—É"""
        try:
            session = self.create_session_with_proxy(proxy_url)
            
            # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = session.get(
                f"{self.config['hub_url']}/api/servers/",
                timeout=self.config['proxy_test_timeout_seconds'],
                verify=False
            )
            
            if response.status_code == 200:
                print(f"‚úì –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_url}")
                return True
            else:
                print(f"‚úó –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {proxy_url} - {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_url}: {e}")
            return False
        finally:
            session.close()
    
    def test_all_proxies(self) -> List[str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö"""
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏...")
        
        working_proxies = []
        proxy_list = self.config['socks5_proxy_list']
        
        for proxy in proxy_list:
            if self.test_proxy(proxy):
                working_proxies.append(proxy)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(working_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –∏–∑ {len(proxy_list)}")
        return working_proxies
    
    def get_current_proxy(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        with self.lock:
            if not self.working_proxies:
                return None
            return self.working_proxies[self.current_proxy_index]
    
    def switch_to_next_proxy(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
        with self.lock:
            if len(self.working_proxies) > 1:
                self.current_proxy_index = (self.current_proxy_index + 1) % len(self.working_proxies)
                current_proxy = self.working_proxies[self.current_proxy_index]
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–∫—Å–∏: {current_proxy}")
    
    def advertise_server(self, server: dict) -> bool:
        """–†–µ–∫–ª–∞–º–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä"""
        current_proxy = self.get_current_proxy()
        if not current_proxy:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã")
            return False
        
        try:
            session = self.create_session_with_proxy(current_proxy)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            advertise_data = {
                "Address": server["address"]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
            response = session.post(
                f"{self.config['hub_url']}/api/servers/advertise",
                json=advertise_data,
                timeout=self.config['request_timeout_seconds'],
                verify=False
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {server['display_name']}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏
                if current_proxy in self.proxy_error_count:
                    del self.proxy_error_count[current_proxy]
                    print(f"üîÑ –°–±—Ä–æ—à–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏: {current_proxy}")
                
                return True
            else:
                error_content = response.text
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {server['display_name']}: {response.status_code} - {error_content}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                self.proxy_error_count[current_proxy] = self.proxy_error_count.get(current_proxy, 0) + 1
                
                # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                if "blocked" in error_content.lower() or "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" in error_content.lower():
                    print("üö´ –ü—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
                    self.refresh_working_proxies()
                
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã —Å–µ—Ä–≤–µ—Ä–∞ {server['display_name']}: {e}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏
            if current_proxy:
                self.proxy_error_count[current_proxy] = self.proxy_error_count.get(current_proxy, 0) + 1
            
            return False
        finally:
            session.close()
    
    def refresh_working_proxies(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏...")
        self.working_proxies = self.test_all_proxies()
        self.current_proxy_index = 0
    
    def advertise_all_servers(self):
        """–†–µ–∫–ª–∞–º–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã"""
        if not self.is_running:
            return
        
        print(f"\nüì¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å–µ—Ä–≤–µ—Ä–æ–≤ ({datetime.now().strftime('%H:%M:%S')})")
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –Ω–µ—Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
        if datetime.now().minute % 10 == 0:
            self.cleanup_failed_proxies()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
        if len(self.working_proxies) > 1:
            self.switch_to_next_proxy()
        
        # –†–µ–∫–ª–∞–º–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã
        success_count = 0
        for server in self.config['servers']:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            delay = random.randint(1, 5)
            time.sleep(delay)
            
            if self.advertise_server(server):
                success_count += 1
        
        print(f"üìä –†–µ–∫–ª–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(self.config['servers'])} —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    
    def cleanup_failed_proxies(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫"""
        failed_proxies = []
        for proxy, error_count in self.proxy_error_count.items():
            if error_count >= 3:
                failed_proxies.append(proxy)
        
        if failed_proxies:
            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º {len(failed_proxies)} –Ω–µ—Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏")
            for proxy in failed_proxies:
                if proxy in self.working_proxies:
                    self.working_proxies.remove(proxy)
                del self.proxy_error_count[proxy]
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É"""
        if self.is_running:
            print("‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        if self.config.get('auto_test_proxies', True):
            self.working_proxies = self.test_all_proxies()
            
            if not self.working_proxies:
                print("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏, —Ä–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã
        interval_seconds = self.config['advertisement_interval_minutes'] * 60
        self.advertisement_timer = threading.Timer(interval_seconds, self._advertisement_cycle)
        self.advertisement_timer.start()
        
        # –ü–µ—Ä–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ —Å—Ä–∞–∑—É
        self.advertise_all_servers()
        
        print(f"‚úÖ –†–µ–∫–ª–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.config['advertisement_interval_minutes']} –º–∏–Ω)")
    
    def _advertisement_cycle(self):
        """–¶–∏–∫–ª —Ä–µ–∫–ª–∞–º—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–π–º–µ—Ä–æ–º)"""
        if self.is_running:
            self.advertise_all_servers()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
            interval_seconds = self.config['advertisement_interval_minutes'] * 60
            self.advertisement_timer = threading.Timer(interval_seconds, self._advertisement_cycle)
            self.advertisement_timer.start()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∫–ª–∞–º—É"""
        if not self.is_running:
            print("‚ö†Ô∏è –†–µ–∫–ª–∞–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É...")
        self.is_running = False
        
        if self.advertisement_timer:
            self.advertisement_timer.cancel()
            self.advertisement_timer = None
        
        print("‚úÖ –†–µ–∫–ª–∞–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–ª–∞–º—ã"""
        return {
            "is_running": self.is_running,
            "working_proxies_count": len(self.working_proxies),
            "total_proxies_count": len(self.config['socks5_proxy_list']),
            "current_proxy": self.get_current_proxy(),
            "servers_count": len(self.config['servers']),
            "proxy_errors": dict(self.proxy_error_count)
        }

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    advertiser = Socks5Advertiser()
    
    try:
        advertiser.start()
        
        # –ñ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã...")
        
    except KeyboardInterrupt:
        pass
    finally:
        advertiser.stop()
